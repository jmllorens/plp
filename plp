#!/usr/bin/python

import numpy as np
import scipy.interpolate as sci
import sys
import os
import argparse

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

parser = argparse.ArgumentParser('Generates a plot from input files.')
parser.add_argument("-n", "--norm", action="store_true", help="Normalize plot wrt maximum.")
parser.add_argument("-k", "--legend", action="store_true", help="Show legend.")
parser.add_argument("-l", "--lines", action="store_true", help="Plot with lines.")
parser.add_argument("-p", "--points", action="store_true", help="Plot with points.")
parser.add_argument("-s", "--script", action="store_true", help="Show gnuplot script.")
parser.add_argument("-S", "--smooth", action="store_true", help="Smooth with splines.")
parser.add_argument("-r", "--ratio", action="store_true", help="Equal axes ratio.")
parser.add_argument("-f", "--finterp", action="store_true", nargs="?", type=str, help="The interpolated data is dumped into 'interp_<data_file>'.")
parser.add_argument("-i", "--interp", action="store", nargs="?", type=int, help="Number of points to interpolate", default=1)


parser.add_argument("files", nargs="*", help="Input files")

args = parser.parse_args()

GPLT='/usr/bin/gnuplot -persist'

Normalize=False
Keys=False
Style='lp'
Show=False

if len(sys.argv) == 1:
    print 'Error, too few arguments'
    print 'Usage: plp -n -k -u n1:n2:n3:n4 <first set of data files> ... -u n1:n2:n3:n4 <n-th set of data files> '
    print '       -u n1:n2 -> plot column n2 against n1'
    print "       -u n1:'(f($n2))' -> plot function f of column n2 against n1"
    print '       -u n1:n2:n3 -> plot columns n2 to n3 against n1'
    print '       -u n1:n2:n3:n4 -> plot columns n2 to n3 every n4 columns against n1'
    print '       if n2 or n3 is negative, the last column of the data file is assumed'
    print '       -t <settings_file> Import gnuplot settings'
    print 'If -u is absent "-u 1:-1" is assumed' 
    print 'If -l and -p are absent lines-points style assumed' 
    sys.exit(1)


ignore = False
File = False
Interpolate = False
Smooth = False
Ratio = False

set_data=[]
files=[]
data_sets=[]

settings_txt=''

skip_rows = 0

for i_cmd,cmd in enumerate(sys.argv[1:]):
    if ignore:
        ignore=False
        continue
    if cmd[0] == '-':
        if cmd[1] == 'u':
            set_data.append(sys.argv[i_cmd+2])
            ignore=True
            continue
        elif cmd[1] == 'n':
            Normalize=True
            continue
        elif cmd[1] == 'k':
            Keys=True
            continue
        elif cmd[1] == 'l':
            Style='l'
            continue
        elif cmd[1] == 'p':
            Style='p'
            continue
        elif cmd[1] == 's':
            Show=True
            continue
        elif cmd[1] == 'S':
            Smooth=True
            continue
        elif cmd[1] == 'r':
            Ratio=True
            continue
        elif cmd[1] == 'i':
            Interpolate=True
            n_points=int(sys.argv[i_cmd+2])
            ignore=True
            continue
        elif cmd[1] == 'f':
            File=True
            continue
        elif cmd[1] == 't':
            settings_txt=open(sys.argv[i_cmd+2],'r').read()
            ignore=True
            continue
        else:
            print 'What?'
            sys.exit(1)
    else:
        files.append(cmd)
        data_sets.append(set_data)
        if len(sys.argv) == i_cmd+2:
            break
        if sys.argv[i_cmd+2][0]=='-':
            set_data=[]

if(Smooth):
    Smooth_arg=' smooth csplines '
else:
    Smooth_arg=''

gpl_head = 'set terminal wxt\n'
if Ratio:
    gpl_head += 'set size ratio -1\n'

gpl_head += settings_txt
if not Keys:
    gpl_head += 'unset key\n'

data_plt=''

for data_file,set_data in zip(files,data_sets):

    if len(set_data) == 0:
        set_data.append('1:2:-1')

    f_data=open(data_file,'r')
    n_columns=0
    for line in f_data:
        if line[0] == '#' or len(line.split()) == 0:
            continue
# New version of gnuplot admits comments not starting by '#'
# and the posibility to use the header to name the columns
        elif not is_number(line.split()[0]):
            skip_rows += 1
            continue
        else:
            row=line.split()
            try:
                float(row[0])
            except:
                print 'Error reading data file: '+data_file
                sys.exit(1)
            n_columns=max(len(row),n_columns)
    f_data.close()

# Creates a data file with the interpolated data
# Assuming first column as x data
    if Interpolate:
        data=np.loadtxt(data_file,skiprows=skip_rows)
        x=np.linspace(data[0,0],data[-1,0],n_points)
        f_i=sci.interp1d(data[:,0],data[:,1:],'linear',axis=0)
        i_data=f_i(x)
        if File:
            data_file='interp_'+data_file
            np.savetxt(data_file,np.c_[x,i_data])
        else:
            data_file='/tmp/tmp.dat'
            np.savetxt(data_file,np.c_[x,i_data])

        

# Reads data file for normalization purposes.
    if Normalize:
        data=np.loadtxt(data_file,skiprows=skip_rows)
    norm=1.0

    if n_columns == 1:
        if Normalize:
            norm=max(abs(data))
        data_plt+='"'+data_file+'" u ($1/%.8E) w '%(norm)+Style+Smooth_arg+',\\\n'
        continue

    for data_set in set_data:
        try:
            n_cols=map( int, data_set.split(':'))
        except:
            # An expression is passed to gnuplot
            data_plt+='"'+data_file+'" u '+data_set+' w '+Style+Smooth_arg+',\\\n'
            continue

# Check number of columns
        if max(n_cols) > n_columns:
            print 'Error too few columns in '+data_file
            print '  requested: '+str(n_cols[1])
            print '  found: '+str(n_columns)
            sys.exit(1)

# Create gnuplot commands with normalization
        if len(n_cols) == 2:
            x_col=n_cols[0]
            y_col=n_cols[1]
            if Normalize:
                norm=max(abs(data[:,y_col-1]))
            aux='%i:($%i/%.8E)'%(x_col,y_col,norm)
            data_plt+='"'+data_file+'" u '+aux+' w '+Style+Smooth_arg+',\\\n'
        if len(n_cols) == 3:
            x_col=n_cols[0]
            y_col_i=n_cols[1]
            y_col_f=n_cols[2]
            if y_col_f < 0:
                y_col_f=n_columns
            for y_col in range(y_col_i,y_col_f+1):
                if y_col == x_col:
                    continue
                if Normalize:
                    norm=max(abs(data[:,y_col-1]))
                aux='%i:($%i/%.8E)'%(x_col,y_col,norm)
                data_plt+='"'+data_file+'" u '+aux+' w '+Style+Smooth_arg+',\\\n'
        if len(n_cols) == 4:
            x_col=n_cols[0]
            y_col_i=n_cols[1]
            y_col_f=n_cols[2]
            if y_col_f < 0:
                y_col_f=n_columns
            y_col_s=n_cols[3]
            for y_col in range(y_col_i,y_col_f+1,y_col_s):
                if y_col == x_col:
                    continue
                if Normalize:
                    norm=max(abs(data[:,y_col-1]))
                aux='%i:($%i/%.8E)'%(x_col,y_col,norm)
                data_plt+='"'+data_file+'" u '+aux+' w '+Style+Smooth_arg+',\\\n'

if Show:
    print gpl_head+'pl '+data_plt[:-3]+'\n#EOF'
open('/tmp/tmp.gpl','w').write(gpl_head+'pl '+data_plt[:-3]+'\n#EOF')
os.system(GPLT+' /tmp/tmp.gpl')

if Interpolate and not File:
    os.system('rm /tmp/tmp.dat')
